# -*- coding: utf-8 -*-
"""MetComp_Aulas

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5jO8-onFy0FnM4sXiRzKm_5keaXYPZE
"""

num = 0 
while num <= 10:
  if (num%2) ==1:
    print(num)
  num += 1 # igual a num = num +1

from math import *
r = []
r.append (1)
r.append (2.2)
r.append(123)
sqrtr = list(map(sqrt,r))
print(sqrtr)

#SOMATORIO
N = 100
soma = 0
for n in range(1,N+10):
  soma += 1/n
  print(soma)
print("soma %f" %soma)

import numpy as np
j = np.linspace(0,8,6)
s = np.arange(0,8,3)
print(j)
print(s)

from numpy import array,dot
a = array([1,2,3])
b = array([2,4,6])
print(dot(a,b))

def add(A,B):
  C = A + B
  return C 

a = 3
b = 2
print(add(a,b))
print(add(2*a, b+1)3*)

#coordenadas cilindricas 
from math import *
def dist(r,theta,z):
  x = r *cos(theta)
  y = r * sin(theta)
  d = sqrt(x**2+y**2+z**2)
  return d

D = dist(2,0.1,-1,5) #(r, theta, z) deve respeitar a ordem dos argumentos da função
#ou
D = dist(r=2,theta=0.1, z=-1.5) #aqui nao precisa respeitar a ordem ja fala o valor pra cada
#ou
D = dist(2,theta=0.1, z=-1.5) #pode fazer isso mas deve respeitar a ordem 
D = dist(r=2, theta=0.1, -1.5) # Nao pode!!!!!

# area da coroa

from math import *

def areac(r1):
  #calcula area do circulo
  return pi*r1**2
def coroa(r1,r2):
  """ calcula area de coroa formada 
  pelos circulos de raio r1 e r2
  com r1>r2 """
  if r1>r2:
    print ("r1 deve ser menor que r2")
    return 0 
  else: 
    return areac(r2) - areac(r1)

print ("a area e %5.2f \n" %(coroa(r1=2,r2=3)))

import numpy as np
import matplotlib.pyplot as plt

def f1(t):
  return t**2*np.exp(-t**2)

def f2(t):
  return t**2*f1(t)

t = np.linspace(0,3,51) #vai de zero a 3 com 51 pontos
y1 = f1(t)
y2 = f2(t)

plt.plot(t, y1, 'r-')
plt.plot(t,y2,'bo')
plt.xlabel('t [s]')
plt.ylabel('y [m]')
plt.legend(['tˆ2*exp(-tˆ2)',\
            'tˆ4*exp(-tˆ2)'])
plt.title('Duas curvas')  
plt.show()

import matplotlib.pyplot as plt
x = [0,2,4,6]
y = [1,3,4,8]
plt.errorbar(x,y,yerr = 0.2)
plt.xlabel('x',fontsize=20)
plt.ylabel('Voltgem [$\mu$V]', color='r')
plt.title('grafico com barras de erro')
plt.legend(['resultado 1'], loc=0)
plt.show()

