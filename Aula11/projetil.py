# -*- coding: utf-8 -*-
"""Projetil

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NSaHpHs7uUCykuGoQH26_M_LzGf5GejG
"""

import numpy as np
from math import *
import matplotlib.pyplot as plt

print("Esse programa resolve o sistema de EDOs do lançamento de projétil com resistência do ar")

def Euler(ti,tf,xi,N,derivada):
  h = (tf - ti)/N   # passo 
  t = np.arange(ti,tf,h)
  if isinstance(xi,(float,int)):
    x = np.zeros(N)
  else:
    neq = len(xi)
    x = np.zeros((N,neq))
    x[0]=xi
  for k in range(1,len(t)-1):
    x[k] = x[k-1] + h*derivada(x[k-1],t[k-1])
  return x,t

def derivada(S,t):
    B2_m = 4 * 10**-5
    v = 700
    g = 9.87
    return np.array([S[1], -B2_m*np.sqrt(S[1]**2 + S[3]**2)*S[1], S[3], -B2_m*np.sqrt(S[1]**2 + S[3]**2) *S[3]- g])

ti = 0                      # t inical
tf = 100                    # t final
theta = np.pi/4
Si = np.array([0,700*np.sqrt(2)/2,0, 700*np.sqrt(2)/2])      # condicoes iniciais
N = 50                      # numero de pontos desejados
S,t = Euler(ti,tf,Si,N,derivada)

plt.plot(S[:,0],S[:,2],'r-')
plt.xlabel("posição x")
plt.ylabel("posição y")
plt.show()

