# -*- coding: utf-8 -*-
"""seno

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QDuEoIEzi7dgC4MwNdrgYJa1xh2ssrXm
"""

# -*- coding: utf-8 -*-
import math as mt
import matplotlib.pyplot as plt
import numpy as np

print("esse programa deseja calcular a serie de Taylor da função sen(x)")

def taylor_seno(x,n):  #função que calcula o seno atraves da serie de Taylor 
  seno = 0   
  for i in range(n):
    seno += (-1)**i / mt.factorial(2*i+1) * x**(2*i+1) #soma todos as partes da serie de taylor  
  return seno

#leta a 
xa = float(input('insira um valor de x \n'))                  # o valor de x 
na = int(input('insira a quantidade de termos desejados \n')) # o numero de termos
sen_a = taylor_seno(xa,na)                                    #o seno do valor x inserido pela funcão 
dif_a = sen_a - mt.sin(xa)                                    # a diferenca entre o valor encontrado pela serie de taylor e o valor exato 
print('1a) o seno de %.2f calculado pela Série de taylor de ordem %.d é %.5f . Comparando com o valor exato do seu seno, a diferença é de %.6f. \n' %(xa,na,sen_a,dif_a))

#letra b
print('- Na questão 1b usaremos o mesmo valor de x do input acima e variando a quantidade de termos de 0 ate 10')
xb = xa  #o valor do x será o mesmo do input da letra a 
nb = 0 
for nb in range(11):
  sen_b = taylor_seno(xb,nb)
  dif_b = sen_b - mt.sin(xb)
  print("1b) o seno de %.2f" %(xb))
  print("ordem: %.d , serie: %.5f , erro: %.5f" %(nb,sen_b,dif_b))

#letra c
print("\n - Na questao 1c variamos o valor de x, mas truncamos o valor do termo em 4")
nc = 4
xc = 0
for xc in range(1,6):
  sen_c = taylor_seno(xc,nc)
  x0 = 0
  prox_termo = taylor_seno(xc+1,nc)
  erro = (xc - x0)**(nc+1)/mt.factorial(nc+1)
  print("1c) o seno de %.2f" %(xc))
  print("ordem:%.d , serie: %.5f , proximo termo será: %.5f , erro: %.5f" %(nc,sen_c,prox_termo, erro))

#letra d 
xd = np.linspace(0,3*np.pi/2,51)
y = np.sin(xd)
y2 = taylor_seno(xd,2)
y3 = taylor_seno(xd,3)
y4 = taylor_seno(xd,4)
y5 = taylor_seno(xd,5)
x_graus = np.degrees(xd)
plt.plot(x_graus,y,label='sen(x)')
plt.plot(x_graus,y2, label='n=2')
plt.plot(x_graus,y3,label='n=3')
plt.plot(x_graus,y4,label='n=4')
plt.plot(x_graus,y5,label='n=5')
plt.grid(True)
plt.ylim(-2,2)
plt.title("Serie de Taylor - sen(x)")
plt.xlabel('x(graus)')
plt.ylabel('sen(x)')
plt.legend()
plt.show()